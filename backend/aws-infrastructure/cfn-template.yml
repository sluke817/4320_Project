AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Resources: 
  # =========================================================================================
  # IAM ROLES, POLICIES, PERMISSIONS
  # =========================================================================================
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - events.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Path: '/'
  
  # =========================================================================================
  # AWS DYNAMODB TBL
  # =========================================================================================
  
  UsersDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties:
      TableClass: STANDARD_INFREQUENT_ACCESS
      BillingMode: PAY_PER_REQUEST 
      AttributeDefinitions: 
        - 
          AttributeName: "name"
          AttributeType: "S"

      KeySchema: 
        - 
          AttributeName: "name"
          KeyType: "HASH"

      TableName: !Sub users-info

  # =========================================================================================
  # AWS LAMBDA FUNCTIONS
  # ========================================================================================= 
  
  AddEditUserServiceLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - AddEditUserService
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AddEditUserService
      Principal: apigateway.amazonaws.com
  
  GetUserServiceLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - GetUserService
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetUserService
      Principal: apigateway.amazonaws.com

  UsersEndpoint:
    Type: AWS::Serverless::Api
    Properties:
      Auth: 
        ApiKeyRequired: False
      StageName: 'prod'
  UsersEndpointUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref UsersEndpoint
          Stage: !Ref UsersEndpoint.Stage
      Description: UsersEndpoint Api Usage Plan for api key
      UsagePlanName: !Sub UsersEndpointApiUsagePlan

  AddEditUserService:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub add-edit-user-lambda-endpoint
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: add_edit_user/
      Description: Stand up endpoint for adding or edited the attributes of a user
      MemorySize: 128
      Timeout: 300
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Environment:
        Variables:
          LOGGING_LEVEL: INFO
          APP_ENV: 'prod'
          USER_TABLE: !Ref UsersDynamoDBTable
      Tags:
        service: !Sub add-edit-user-endpoint-prod
        function_name: !Sub add-edit-user-endpoint-prod
      Events:
        HttpGetPlayer:
          Type: Api
          Properties:
            RestApiId: !Ref UsersEndpoint
            Path: add-edit
            Method: post
  
  GetUserService:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub get-user-lambda-endpoint
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: retrieve_user_info/
      Description: Stand up endpoint for getting attributes of a user
      MemorySize: 128
      Timeout: 300
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Environment:
        Variables:
          LOGGING_LEVEL: INFO
          APP_ENV: 'prod'
          USER_TABLE: !Ref UsersDynamoDBTable
      Tags:
        service: !Sub get-user-lambda-endpoint
        function_name: !Sub get-user-lambda-endpoint
      Events:
        HttpGetPlayer:
          Type: Api
          Properties:
            RestApiId: !Ref UsersEndpoint
            Path: get-user-info/{username}
            Method: get

# cd "/Users/trevormadison/Documents/FashdriveFiles/College Files/Semester 6/4320_Project/backend/aws-infrastructure"
# sam build --profile kraken --template cfn-template.yml  && sam package --profile kraken --s3-bucket kraken-lambda-packages --s3-prefix user-endpoint --output-template-file cfn-packaged.yaml --region us-east-2 
# sam deploy --profile kraken --template-file cfn-packaged.yaml --s3-bucket kraken-lambda-packages --s3-prefix user-endpoint --stack-name user-stack --capabilities CAPABILITY_NAMED_IAM --region us-east-2 --parameter-overrides Environment=prod